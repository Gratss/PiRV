# Функция для расчета количества шагов в решетка-тор
def calculate_steps(m, p):
    # Это расстояние между двумя узлами на решетке-торе
    return min(abs(p[0] - p[1]), m - abs(p[0] - p[1]))

# Функция для вычисления общей трудоемкости
def calculate_workload(t_n, m, p, t_k):
    total_steps = 0
    # Пройдемся по всем парам узлов
    for i in range(len(p) - 1):
        steps = calculate_steps(m, p[i:i + 2])  # Время передачи между соседними узлами
        total_steps += steps
    
    # Общая трудоемкость = время передачи * количество шагов + время обработки * количество узлов
    total_work = t_n * total_steps + t_k * len(p)
    return total_work

# Параметры
t_n = 0.5  # Время передачи данных
m = 10  # Размер сети (например, 10 узлов)
p = [1, 5, 7, 9]  # Узлы для передачи данных (например, узлы 1, 5, 7 и 9)
t_k = 1  # Время обработки данных на каждом узле

# Рассчитываем трудоемкость
workload = calculate_workload(t_n, m, p, t_k)

print(f"Трудоемкость операции рассылки: {workload:.2f}")
